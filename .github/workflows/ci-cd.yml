name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Check code formatting
      run: npm run format -- --check
      
    - name: Run tests
      run: npm test
      
    - name: Build project
      run: npm run build
      
    - name: Upload test coverage
      uses: codecov/codecov-action@v4
      if: matrix.node-version == '18.x'
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level=moderate || true
      
    - name: Security scan with Snyk
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium
      continue-on-error: true
        
    - name: CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate
        comment-summary-in-pr: true

  build-and-validate:
    name: Build & Validate
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Validate TypeScript types
      run: npx tsc --noEmit
      
    - name: Check package.json validity
      run: npm pack --dry-run
      
    - name: Validate examples syntax
      run: |
        for file in examples/*.js; do
          echo "Validating $file"
          node -c "$file"
        done
      
    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          dist/
          package.json
          README.md
        retention-days: 7

  government-compliance:
    name: Government Compliance Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for sensitive data patterns
      run: |
        echo "üîç Scanning for sensitive data patterns..."
        
        # Check for potential API keys or secrets
        if grep -r -i -E "(api[_-]?key|secret|password|token)" --include="*.js" --include="*.ts" --include="*.json" --exclude-dir=node_modules --exclude-dir=.git .; then
          echo "‚ö†Ô∏è Warning: Potential sensitive data found in code"
          echo "Please review and ensure no actual secrets are committed"
        else
          echo "‚úÖ No obvious sensitive data patterns found"
        fi
        
        # Check for government-specific compliance
        echo "üèõÔ∏è Checking government compliance patterns..."
        
        # Ensure security-related files exist
        if [[ ! -f "SECURITY.md" ]]; then
          echo "‚ùå SECURITY.md file missing"
          exit 1
        fi
        
        if [[ ! -f ".gitignore" ]]; then
          echo "‚ùå .gitignore file missing"
          exit 1
        fi
        
        echo "‚úÖ Government compliance files present"
        
    - name: License compliance check
      run: |
        echo "üìú Checking license compliance..."
        if [[ ! -f "LICENSE" ]] && ! grep -q "license" package.json; then
          echo "‚ö†Ô∏è Warning: No license information found"
          echo "Government agencies should review licensing requirements"
        else
          echo "‚úÖ License information present"
        fi
        
    - name: Documentation completeness
      run: |
        echo "üìö Checking documentation completeness..."
        
        required_sections=("Installation" "Authentication" "API Reference" "Security" "Contributing")
        
        for section in "${required_sections[@]}"; do
          if ! grep -q "$section" README.md; then
            echo "‚ùå Missing required section: $section"
            exit 1
          fi
        done
        
        echo "‚úÖ All required documentation sections present"

  notify-on-failure:
    name: Failure Notification
    runs-on: ubuntu-latest
    needs: [test, security, build-and-validate, government-compliance]
    if: failure()
    
    steps:
    - name: Notify on failure
      run: |
        echo "üö® Pipeline failed - Government agencies should be notified"
        echo "Failed jobs may indicate security or compliance issues"
        echo "Please review failed checks before deploying to production"
