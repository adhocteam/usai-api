name: Security Monitoring

on:
  schedule:
    # Run daily security scans at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual triggering
  push:
    branches: [ main ]
    paths:
      - 'package*.json'
      - '.github/workflows/security.yml'

jobs:
  security-audit:
    name: Comprehensive Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit (detailed)
      run: |
        echo "üîç Running detailed npm audit..."
        npm audit --audit-level=info || true
        npm audit --json > audit-results.json || true
        
    - name: Check for known vulnerabilities
      run: |
        echo "üõ°Ô∏è Checking for known vulnerabilities..."
        
        # Check if any high/critical vulnerabilities exist
        if npm audit --audit-level=high --json | jq -e '.vulnerabilities | length > 0' > /dev/null 2>&1; then
          echo "‚ùå High/Critical vulnerabilities found!"
          npm audit --audit-level=high
          exit 1
        else
          echo "‚úÖ No high/critical vulnerabilities found"
        fi

  license-compliance:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install license checker
      run: npm install -g license-checker
      
    - name: Check licenses
      run: |
        echo "üìú Checking dependency licenses..."
        
        # Generate license report
        license-checker --summary --onlyAllow 'MIT;Apache-2.0;BSD-3-Clause;BSD-2-Clause;ISC;0BSD;CC0-1.0' || true
        
        # Generate detailed license report
        license-checker --json > licenses.json
        
        echo "‚úÖ License compliance check completed"
        
    - name: Upload license report
      uses: actions/upload-artifact@v3
      with:
        name: license-report
        path: licenses.json
        retention-days: 30

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run TruffleHog secrets scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        
    - name: Custom secrets patterns
      run: |
        echo "üîç Scanning for government-specific sensitive patterns..."
        
        # Government-specific patterns
        patterns=(
          "-----BEGIN (RSA |DSA |EC |OPENSSH |PGP )?PRIVATE KEY-----"
          "(aws_access_key_id|aws_secret_access_key)"
          "AKIA[0-9A-Z]{16}"
          "sk-[a-zA-Z0-9]{48}"
          "(?i)(bearer\s+[a-z0-9\-._~+/]+)"
          "(?i)(api[_-]?key|secret|password|token|credential)[\s]*[:=][\s]*['\"][^'\"]+['\"]"
        )
        
        found_issues=false
        
        for pattern in "${patterns[@]}"; do
          if grep -r -E "$pattern" --include="*.js" --include="*.ts" --include="*.json" --exclude-dir=node_modules --exclude-dir=.git . 2>/dev/null; then
            echo "‚ùå Potential secret found matching pattern: $pattern"
            found_issues=true
          fi
        done
        
        if [ "$found_issues" = true ]; then
          echo "üö® Potential secrets detected! Please review and remediate."
          exit 1
        else
          echo "‚úÖ No obvious secrets detected"
        fi

  dependency-graph:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate dependency tree
      run: |
        echo "üå≥ Generating dependency analysis..."
        
        # Create dependency tree
        npm list --all --json > dependency-tree.json || true
        
        # Check for outdated packages
        npm outdated --json > outdated-packages.json || true
        
        # Check for unused dependencies
        npx depcheck --json > unused-dependencies.json || true
        
        echo "üìä Dependency analysis completed"
        
    - name: Upload dependency reports
      uses: actions/upload-artifact@v3
      with:
        name: dependency-analysis
        path: |
          dependency-tree.json
          outdated-packages.json
          unused-dependencies.json
        retention-days: 30

  government-security-review:
    name: Government Security Review
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: FedRAMP considerations check
      run: |
        echo "üèõÔ∏è Reviewing FedRAMP and government security considerations..."
        
        # Check for security documentation
        security_files=("SECURITY.md" "CONTRIBUTING.md" ".github/workflows/security.yml")
        
        for file in "${security_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            echo "‚ùå Missing security file: $file"
            exit 1
          fi
        done
        
        # Check for proper .gitignore patterns
        required_patterns=("*.key" "*.pem" "*.p12" "credentials.json" ".env")
        
        for pattern in "${required_patterns[@]}"; do
          if ! grep -q "$pattern" .gitignore; then
            echo "‚ö†Ô∏è Consider adding '$pattern' to .gitignore for government security"
          fi
        done
        
        echo "‚úÖ Basic government security patterns validated"
        
    - name: FISMA compliance indicators
      run: |
        echo "üìã Checking FISMA compliance indicators..."
        
        # Check for audit logging capabilities
        if grep -r -i "log\|audit" --include="*.js" --include="*.ts" src/ > /dev/null 2>&1; then
          echo "‚úÖ Logging capabilities present"
        else
          echo "‚ö†Ô∏è Consider adding audit logging for FISMA compliance"
        fi
        
        # Check for encryption-related code
        if grep -r -i "encrypt\|tls\|ssl\|https" --include="*.js" --include="*.ts" src/ > /dev/null 2>&1; then
          echo "‚úÖ Encryption-related code found"
        else
          echo "‚ö†Ô∏è Ensure proper encryption is implemented"
        fi
        
        echo "üìä FISMA compliance review completed"

  security-summary:
    name: Security Summary Report
    runs-on: ubuntu-latest
    needs: [security-audit, license-compliance, secrets-scan, dependency-graph, government-security-review]
    if: always()
    
    steps:
    - name: Generate security summary
      run: |
        echo "üìã SECURITY SUMMARY REPORT"
        echo "========================="
        echo ""
        echo "üèõÔ∏è Government Security Assessment for USAi API Node.js Client"
        echo ""
        echo "Jobs Status:"
        echo "- Security Audit: ${{ needs.security-audit.result }}"
        echo "- License Compliance: ${{ needs.license-compliance.result }}"
        echo "- Secrets Scan: ${{ needs.secrets-scan.result }}"
        echo "- Dependency Analysis: ${{ needs.dependency-graph.result }}"
        echo "- Government Security Review: ${{ needs.government-security-review.result }}"
        echo ""
        
        if [[ "${{ needs.security-audit.result }}" == "failure" ]] || 
           [[ "${{ needs.secrets-scan.result }}" == "failure" ]] || 
           [[ "${{ needs.government-security-review.result }}" == "failure" ]]; then
          echo "üö® SECURITY ISSUES DETECTED"
          echo "Government agencies should review failed checks before use"
          echo ""
          echo "Recommended Actions:"
          echo "1. Review failed security checks"
          echo "2. Remediate any discovered vulnerabilities"
          echo "3. Update dependencies if needed"
          echo "4. Conduct additional security review"
          echo "5. Follow agency-specific security protocols"
        else
          echo "‚úÖ SECURITY CHECKS PASSED"
          echo "Library appears to meet basic security requirements"
          echo ""
          echo "Government agencies should still:"
          echo "1. Conduct agency-specific security review"
          echo "2. Test with organization's security tools"
          echo "3. Follow internal approval processes"
          echo "4. Monitor for security updates"
        fi
